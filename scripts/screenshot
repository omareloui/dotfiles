#!/usr/bin/env bash

version=1.2.0

BOLD="\e[1m"
END_BOLD="\e[22m"

BLACK="\e[30m"
WHITE="\e[97m"

RED="\e[31m"
RED_BG="\e[41m"
GREEN="\e[32m"
YELLOW="\e[33m"
YELLOW_BG="\e[43m"
BLUE="\e[34m"
MAGENTA="\e[35m"

BRIGHT_GRAY="\e[37m"
DARK_GRAY="\e[90m"

BRIGHT_RED="\e[91m"
BRIGHT_MAGENTA="\e[95m"

RESET="\e[0m"

LONGOPTS=help,no-copy,sleep:,quite,preview
OPTIONS=h,C,s:,q,p

PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
eval set -- "$PARSED"

copy=1
sleep=0
quite=0
preview=0

while true; do
	case "$1" in
	-h | --help)
		echo -e ""
		echo -e "  ${BOLD}Usage:${END_BOLD}    ${BRIGHT_MAGENTA}$(basename "$0") ${YELLOW}[${BRIGHT_RED}options${DARK_GRAY}...${YELLOW}]${BRIGHT_RED} ${YELLOW}<${GREEN}action${YELLOW}>${RESET}"
		echo -e "  ${BOLD}Version:${RESET}  ${YELLOW}$version${RESET}"
		echo -e ""
		echo -e "  ${BOLD}Description:${RESET}"
		echo -e ""
		echo -e "    ${BRIGHT_GRAY}Take a screenshot.${RESET}"
		echo -e ""
		echo -e "  ${BOLD}Args:${RESET}"
		echo -e ""
		echo -e "    ${BOLD}${GREEN}action${WHITE} ${YELLOW}{${BLUE}full${YELLOW}|${BLUE}area${YELLOW}|${BLUE}window${YELLOW}}${RESET}"
		echo -e "      ${BLUE}full${RESET}      ${BRIGHT_RED}-${RESET} Take a screenshot of the full screen."
		echo -e "      ${BLUE}area${RESET}      ${BRIGHT_RED}-${RESET} Take a screenshot of an area you select."
		echo -e "      ${BLUE}window${RESET}    ${BRIGHT_RED}-${RESET} Take a screenshot of a window."
		echo -e ""
		echo -e "  ${BOLD}Options:${RESET}"
		echo -e ""
		echo -e "    ${BLUE}-h${RESET}, ${BLUE}--help${RESET}        ${BRIGHT_RED}-${RESET} Show this help."
		echo -e ""
		echo -e "    ${BLUE}-C${RESET}, ${BLUE}--no-copy${RESET}     ${BRIGHT_RED}-${RESET} Don't copy the screenshot to clipboard."
		echo -e ""
		echo -e "    ${BLUE}-s${RESET}, ${BLUE}--sleep ${YELLOW}<${MAGENTA}int${YELLOW}>${RESET} ${BRIGHT_RED}-${RESET} Milliseconds to sleep before taking the screenshot for ${BLUE}full${RESET} or ${BLUE}window${RESET} actions."
		echo -e ""
		echo -e "    ${BLUE}-q${RESET}, ${BLUE}--quite${RESET}       ${BRIGHT_RED}-${RESET} Don't notify countdown."
		echo -e ""
		echo -e "    ${BLUE}-p${RESET}, ${BLUE}--preview${RESET}     ${BRIGHT_RED}-${RESET} preview the screenshot after it's taken."
		echo -e ""
		echo -e "  ${BOLD}Examples:${RESET}"
		echo -e ""
		echo -e "    ${RED}\$${RESET} ${BRIGHT_MAGENTA}$(basename "$0")${RESET} area"
		echo -e "    ${RED}\$${RESET} ${BRIGHT_MAGENTA}$(basename "$0")${RESET} -C window"
		echo -e "    ${RED}\$${RESET} ${BRIGHT_MAGENTA}$(basename "$0")${RESET} -qs 3 full"
		echo -e ""
		exit 0
		;;
	-C | --no-copy)
		copy=0
		shift
		;;
	-q | --quite)
		quite=1
		shift
		;;
	-p | --preview)
		preview=1
		shift
		;;
	-s | --sleep)
		sleep="$2"
		shift 2
		;;
	--)
		shift
		break
		;;
	*)
		echo "Programming error"
		exit 3
		;;
	esac
done

NOTIFICATION_ID=669
time=$(date +%Y-%m-%d-%I-%M-%S)
geometry=$(xrandr | head -n1 | cut -d',' -f2 | tr -d '[:blank:],current')
dir="$(xdg-user-dir PICTURES)/Screenshots"
filename="Screenshot_${time}_${geometry}.png"

sound_file="$HOME/.local/share/sounds/camera-shutter.wav"
notification_icon="$HOME/.local/share/icons/camera-shutter.png"
notification_icon2="$HOME/.local/share/icons/stopwatch.png"

if [[ ! -f $sound_file ]]; then
	source_file="$DOTFILES/assets/sounds/camera-shutter.wav"
	if [[ ! -f "$source_file" ]]; then
		echo -e "${YELLOW_BG}${BOLD}${BLACK}Warning${RESET} can't find the sound file."
	fi
	cp "$source_file" "$sound_file"
fi

if [[ ! -f $notification_icon ]]; then
	source_file="$DOTFILES/assets/icons/camera-shutter.png"
	if [[ ! -f "$source_file" ]]; then
		echo -e "${YELLOW_BG}${BOLD}${BLACK}Warning${RESET} can't find the notification icon."
	fi
	cp "$source_file" "$notification_icon"
fi

if [[ ! -f $notification_icon2 ]]; then
	source_file="$DOTFILES/assets/icons/stopwatch.png"
	if [[ ! -f "$source_file" ]]; then
		echo -e "${YELLOW_BG}${BOLD}${BLACK}Warning${RESET} can't find the counter icon."
	fi
	cp "$source_file" "$notification_icon2"
fi

[[ ! -d $dir ]] && mkdir -p "$dir"

function notify() {
	paplay "$sound_file"
	if ((preview == 1)); then
		viewnior "$dir/$filename"
	fi

	if [[ -e "$dir/$filename" ]]; then
		message="Created $filename."
		((copy == 1)) && message="$message<br>And copied to clipboard."
		notify-send "Screenshot" "$message" -u low -i "$notification_icon" -t 3000 -r "$NOTIFICATION_ID"
	else
		notify-send "Screenshot" "Deleted $filename" -u low -i "$notification_icon" -t 3000 -r "$NOTIFICATION_ID"
	fi

}

function shot_full() {
	pushd "$dir" || exit 1
	{
		if ((copy == 1)); then
			maim -u -f png |
				tee "$filename" |
				xclip -selection clipboard -t image/png
		else
			maim -u -f png >"$filename"
		fi
	} && {
		notify
	}
	popd || exit 1
}

function shot_area() {
	pushd "$dir" || exit 1

	{
		if ((copy == 1)); then
			maim -u -f png -s -b 2 -c 0.35,0.55,0.85,0.25 -l |
				tee "$filename" |
				xclip -selection clipboard -t image/png
		else
			maim -u -f png -s -b 2 -c 0.35,0.55,0.85,0.25 -l >"$filename"
		fi
	} && {
		notify
	}

	popd || exit 1
}

function shot_window() {
	pushd "$dir" || exit 1

	{
		if ((copy == 1)); then
			maim -u -f png -i "$(xdotool getactivewindow)" |
				tee "$filename" |
				xclip -selection clipboard -t image/png
		else
			maim -u -f png -i "$(xdotool getactivewindow)" >"$filename"
		fi
	} && {
		notify
	}

	popd || exit 1
}

countdown() {
	if (($1 > 0)); then
		for sec in $(seq "$1" -1 1); do
			if ((quite == 0)); then
				notify-send -t 1000 -r "$NOTIFICATION_ID" -i "$notification_icon2" "Taking shot in : $sec"
			fi
			sleep 1
		done
	fi
}

case $1 in
full)
	countdown "$sleep"
	shot_full
	;;
window)
	countdown "$sleep"
	shot_window
	;;
area)
	shot_area
	;;
*)
	echo -e "${RED_BG}${BOLD}${BLACK}Error${RESET} invalid action."
	echo -e "Run ${YELLOW}\"${BRIGHT_MAGENTA}${BOLD}$(basename "$0") --help${RESET}${YELLOW}\"${RESET} for more information."
	exit 1
	;;
esac
