#!/usr/bin/env bash

version=2.0.0

BOLD="\e[1m" END_BOLD="\e[22m"

WHITE="\e[97m"

RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"

BRIGHT_GRAY="\e[37m"
DARK_GRAY="\e[90m"

BRIGHT_RED="\e[91m"
BRIGHT_MAGENTA="\e[95m"

RESET="\e[0m"

verbose=0
update_cache=0

LONGOPTS=update-cache,verbose,help
OPTIONS=uvh

PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
eval set -- "$PARSED"

while true; do
	case "$1" in
	-v | --verbose)
		verbose=1
		shift
		;;
	-u | --update-cache)
		update_cache=1
		shift
		;;
	-h | --help)
		echo -e ""
		echo -e "  ${BOLD}Usage:${END_BOLD}    $(basename "$0") ${YELLOW}[${BRIGHT_RED}options${DARK_GRAY}...${YELLOW}]${RESET} ${YELLOW}<${GREEN}theme${YELLOW}>${RESET}"
		echo -e "  ${BOLD}Version:${RESET}  ${YELLOW}$version${RESET}"
		echo -e ""
		echo -e "  ${BOLD}Description:${RESET}"
		echo -e ""
		echo -e "    ${BRIGHT_GRAY}Change the system theme.${RESET}"
		echo -e ""
		echo -e "  ${BOLD}Args:${RESET}"
		echo -e ""
		echo -e "    ${BOLD}${GREEN}theme${WHITE} ${YELLOW}{${BLUE}fuji${YELLOW}|${BLUE}gruvbox${YELLOW}|${BLUE}mocha${YELLOW}}${RESET}"
		echo -e "      ${BLUE}fuji${RESET}     ${BRIGHT_RED}-${RESET} Change the theme to mountain fuji"
		echo -e "      ${BLUE}gruvbox${RESET}  ${BRIGHT_RED}-${RESET} Change the theme to gruvbox material"
		echo -e "      ${BLUE}mocha${RESET}    ${BRIGHT_RED}-${RESET} Change the theme to catppuccin mocha."
		echo -e ""
		echo -e "  ${BOLD}Options:${RESET}"
		echo -e ""
		echo -e "    ${BLUE}-h${RESET}, ${BLUE}--help${RESET}          ${BRIGHT_RED}-${RESET} Show this help."
		echo -e "    ${BLUE}-v${RESET}, ${BLUE}--verbose${RESET}       ${BRIGHT_RED}-${RESET} Prints out the process state."
		echo -e "    ${BLUE}-u${RESET}, ${BLUE}--update-cache${RESET}  ${BRIGHT_RED}-${RESET} Removes the cache of the selected theme and re-cache it."
		echo -e ""
		echo -e "  ${BOLD}Examples:${RESET}"
		echo -e ""
		echo -e "    ${RED}\$${RESET} ${BRIGHT_MAGENTA}$(basename "$0")${RESET} fuji"
		echo -e "    ${RED}\$${RESET} ${BRIGHT_MAGENTA}$(basename "$0")${RESET} -vu mocha"
		echo -e ""
		exit 0
		;;
	--)
		shift
		break
		;;
	*)
		echo -e "${RED}Error${YELLOW}:${RESET} Programming error"
		exit 3
		;;
	esac
done

function p() {
	if ((verbose == 1)); then
		echo -e "$1"
	fi
}

declare THEME_DIR

function sanatize_config {
	file=$1
	cache="$HOME/.cache/themes/${file//\//%}"

	if ((update_cache == 1)); then
		rm -rf "$cache"
	fi

	if [[ ! -f $cache ]]; then
		mkdir -p "$(dirname "$cache")"
		cp "$file" "$cache"
		sed -i -e '/^$/d' -e '/^#/d' -e 's/^export //' "$cache"
	fi

	echo "$cache"
}

function generate_config {
	config=$1
	dest=$2
	include_global=$3

	[[ -z $THEME_DIR ]] && {
		echo -e "${RED}Error${YELLOW}:${RESET} the theme directory isn't set"
		exit 3
	}

	cache="$HOME/.cache/themes/${THEME_DIR//\//%}%${config}"

	if ((update_cache == 1)); then
		rm -rf "$cache"
	fi

	if [[ -f $cache ]]; then
		p "${BLUE}Info${YELLOW}:${RESET} copying ${config} config from cache"
		cp -f "$cache" "$dest"
		return
	fi

	p "${BLUE}Info${YELLOW}:${RESET} generating ${config} config"

	config_src="${THEME_DIR}/${config}.config"

	[[ ! -f $config_src && "$include_global" -ne 1 ]] && {
		echo -e "${RED}Error${YELLOW}:${RESET} can't find the config for $config"
		exit 1
	}

	template="$HOME/.dotfiles/themes/.templates/${config}.template"

	[[ ! -f $template ]] && {
		echo -e "${RED}Error${YELLOW}:${RESET} can't find the template for $config"
		exit 1
	}

	cp -f "$template" "$dest"

	function generate {
		config="$1"
		while read -r line; do
			setting="$(echo "$line" | cut -d '=' -f 1)"
			value="$(echo "$line" | cut -d '=' -f 2- | sed -e 's;\(^"\|"$\);;g')"
			sed -i -e "s;\[\[${setting}\]\];${value};g" "$dest"
		done <"$config"
	}

	((include_global == 1)) && generate "$(sanatize_config "${THEME_DIR}/global.config")"

	if [[ -f $config_src ]]; then
		sanatized_config="$(sanatize_config "$config_src")"
		generate "$sanatized_config"
	fi

	mkdir -p "$(dirname "$cache")"
	cp -f "$dest" "$cache"
}

function change {
	dotfiles="$DOTFILES" || "$HOME/.dotfiles"

	THEME_DIR="$dotfiles/themes/$1"

	current_theme="$dotfiles/themes/current.sh"

	# general (used in scripts)
	config_files="$(fd ".*\.config" "$THEME_DIR" -d 1 -t f)"
	{
		echo -e "#!/usr/bin/env bash\n\n" >"$current_theme"
		for config_file in $config_files; do
			echo ". \"$config_file\"" >>"$current_theme"
		done
	} &&
		p "${GREEN}Success${YELLOW}:${RESET} done general theme script"

	# wallpaper
	p "${BLUE}Info${YELLOW}:${RESET} copying wallpapers"
	wallpapers_dist="$HOME/.wallpaper/current"
	wallpapers="$(fd . "$THEME_DIR/wallpapers" -t f -d 1)"
	rm -rf "$wallpapers_dist"
	mkdir -p "$wallpapers_dist"
	cp $wallpapers "$HOME/.wallpaper/current/"
	p "${BLUE}Info${YELLOW}:${RESET} setting the wallpaper"
	wallpaper "$(fd . -p "$THEME_DIR/wallpapers" -It f -d 1 | shuf --random-source=/dev/urandom -n 1)" 1 &&
		p "${GREEN}Success${YELLOW}:${RESET} done the wallpaper"

	# cava
	generate_config "cava" "$HOME/.config/cava/config" &&
		p "${GREEN}Success${YELLOW}:${RESET} done cava"

	# kitty
	generate_config "kitty" "$HOME/.config/kitty/theme.conf" 1 &&
		p "${GREEN}Success${YELLOW}:${RESET} done kitty"

	# hyprland
	generate_config "hyprland" "$HOME/.config/hypr/conf/theme.conf" 1 && {
		p "${BLUE}Info${YELLOW}:${RESET} reloading hyprland"
		hyprctl reload >/dev/null
	} &&
		p "${GREEN}Success${YELLOW}:${RESET} done hyprland"

	# wlogout
	generate_config "wlogout" "$HOME/.config/wlogout/style.css" 1 &&
		p "${GREEN}Success${YELLOW}:${RESET} done wlogout"

	# eww
	p "${BLUE}Info${YELLOW}:${RESET} killing eww"
	pkill eww
	# TODO: change workspace icons
	# TODO: add music.png to the assests
	p "${BLUE}Info${YELLOW}:${RESET} copying eww assets"
	cp "$THEME_DIR/assets/eww-launcher.png" "$HOME/.config/eww/assets/launcher.png"
	generate_config "eww.scss" "$HOME/.config/eww/css/_theme.scss" 1
	generate_config "eww.yuck" "$HOME/.config/eww/eww.yuck"
	p "${BLUE}Info${YELLOW}:${RESET} opening eww's main bar"
	eww open bar &>/dev/null
	p "${GREEN}Success${YELLOW}${YELLOW}:${RESET} done eww"

	# neovim
	# TODO: icons
	# TODO: dashboard ascii art
	{
		generate_config "nvim.lualine" "$HOME/.config/nvim/lua/omareloui/plugins/lualine.lua"
		generate_config "nvim.theme" "$HOME/.config/nvim/lua/omareloui/config/theme.lua"
		generate_config "nvim.palette" "$HOME/.config/nvim/lua/omareloui/ui/palette.lua" 1
	} && p "${GREEN}Success${YELLOW}${YELLOW}:${RESET} done neovim"

	# dunst
	p "${BLUE}Info${YELLOW}:${RESET} killing dunst"
	pkill dunst
	generate_config "dunst" "$HOME/.config/dunst/dunstrc" 1 &&
		p "${GREEN}Success${YELLOW}:${RESET} done dunst"

	# gtk
	p "${BLUE}Info${YELLOW}:${RESET} setting up gtk theme"
	. "$THEME_DIR/gtk.config"
	[[ -n $gtk_is_dark ]] && {
		((gtk_is_dark == 1)) &&
			gsettings set org.gnome.desktop.interface color-scheme prefer-dark
		((gtk_is_dark == 0)) &&
			gsettings reset org.gnome.desktop.interface color-scheme
	}
	if [[ -d "$HOME/.local/share/themes/$gtk_theme_name" || -d "/usr/share/themes/$gtk_theme_name" ]]; then
		[[ -n $gtk_theme_name ]] &&
			gsettings set org.gnome.desktop.interface gtk-theme "$gtk_theme_name"
		p "${GREEN}Success${YELLOW}:${RESET} done gtk settings"
	else
		echo -e "${YELLOW}Warning${RED}:${RESET} can't find \"$gtk_theme_name\" theme"
	fi

	# TODO: neofetch
	# TODO: rofi
	# TODO: firefox

	# TODO: icons (dunst,battery script,backlight script,gtk)
}

case $1 in
catppuccin | catppuccin-mocha | mocha)
	change "catppuccin/mocha"
	;;
mountain | mountain-fuji | fuji)
	change "mountain/fuji"
	;;
gruvbox | gruvbox-material | material)
	change "gruvbox/material"
	;;
*)
	echo -e "${RED}Error${YELLOW}:${RESET} invalid theme"
	echo -e "${BOLD}For available themes:${RESET}"
	echo -e "    ${RED}\$${RESET} ${BRIGHT_MAGENTA}$(basename "$0")${RESET} --help"
	exit 1
	;;
esac
