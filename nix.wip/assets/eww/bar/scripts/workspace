#!/usr/bin/env bash

focued=""
occupied_blured=""
empty=""

declare -A o=([1]=0 [2]=0 [3]=0 [4]=0 [5]=0 [6]=0 [7]=0 [8]=0 [9]=0 [10]=0)
declare -A monitormap
declare -A workspaces

# get initial focused workspace
focusedws=$(hyprctl -j monitors | jq -r '.[] | select(.focused == true) | .activeWorkspace.id')

# set icon for each workspace
status() {
	if [ "${o[$1]}" -eq 1 ]; then
		mon=${monitormap[${workspaces[$1]}]}
		if [ "$focusedws" -eq "$1" ]; then
			echo -n "${focued[$mon]}"
		else
			echo -n "${occupied_blured[$mon]}"
		fi
	else
		echo -n "$empty"
	fi
}

# handle workspace create/destroy
workspace_event() {
	o[$1]=$2
	while read -r k v; do workspaces[$k]="$v"; done < <(hyprctl -j workspaces | jq -r '.[] | "\(.id) \(.monitor)"')
}

# handle monitor (dis)connects
monitor_event() {
	while read -r k v; do monitormap["$k"]=$v; done < <(hyprctl -j monitors | jq -r '.[] | "\(.name) \(.id) "')
}

# generate the json for eww
generate() {
	printf '['
	for i in {1..10}; do
		printf "{\"number\": $i,\"icon\": \"$(status "$i")\"}$(if (("$i" != 10)); then echo ','; fi)"
	done
	echo ']'
}

# setup
# add monitors
monitor_event

# add workspaces
while read -r k v; do workspaces[$k]="$v"; done < <(hyprctl -j workspaces | jq -r '.[] | "\(.id) \(.monitor)"')

# check occupied workspaces
for num in "${!workspaces[@]}"; do
	o[$num]=1
done

generate

socat -u UNIX-CONNECT:/tmp/hypr/"$HYPRLAND_INSTANCE_SIGNATURE"/.socket2.sock - | while read -r line; do
	case ${line%>>*} in
	"workspace")
		focusedws=${line#*>>}
		;;
	"focusedmon")
		focusedws=${line#*,}
		;;
	"createworkspace")
		workspace_event "${line#*>>}" 1
		;;
	"destroyworkspace")
		workspace_event "${line#*>>}" 0
		;;
	"monitor"*)
		monitor_event
		;;
	esac
	generate
done
