# interpreter for shell commands
set shell zsh

# the image previewer
set icons ~/.config/lf/icons
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner

# misc
set info size


# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open %{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        video/*) lf -remote "send $id \$vlc \$fx >/dev/null 2>/dev/null";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash ${{
    set -f
    if gio trash 2>/dev/null; then
        gio trash $fx
    else
        mkdir -p ~/.trash
        mv -- $fx ~/.trash
    fi
}}

# define a custom 'delete' command
cmd delete ${{
    # set -f
    # printf "$fx\n"
    # printf "delete?[y/n]"
    # read ans
    # [[ "$ans" == "y" ]] && rm -rf $fx
    rm -rf $fx
}}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
# map <delete> delete

# create a new directory
cmd mkdir %mkdir "$@"
map a push :mkdir<space>

# create a directory and move all selected to this new directory
cmd newfold ${{
    set -f
    printf "Directory name: "
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}
map A newfold

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
# cmd extract ${{
#     set -f

#     for file in $fx; do

#       case $file in
#         *.tar.bz|*.tar.bz2|*.tbz|*.tbz2)
#           foldername="$(basename "${file%%.*}")"
#           [[ ! -d foldername ]]
#           tar xjvf "$file" -C "$foldername"
#         ;;
#         *.tar.gz|*.tgz)
#           foldername="$(basename "${file%%.*}")"
#           [[ ! -d foldername ]]
#           tar xzvf "$file" -C "$foldername"
#         ;;
#         *.tar.xz|*.txz)
#           foldername="$(basename "${file%%.*}")"
#           [[ ! -d foldername ]]
#           tar xJvf "$file" -C "$foldername"
#         ;;
#         *.zip)
#           unzip "$file"
#         ;;
#         *.rar)
#             unrar x "$file"
#         ;;
#         *.7z)
#           7z x "$file"
#         ;;
#       esac

#     done

#     lf -remote "send $id unselect"
# }}

# compress current file or selected files with tar and gunzip
# cmd tar ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     tar czf $1.tar.gz $1
#     rm -rf $1
# }}

# compress current file or selected files with zip
# cmd zip ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     zip -r $1.zip $1
#     rm -rf $1
# }}


# Bulk rename
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [[ -n "$fs" ]]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

map R bulk-rename

# Yank paths
cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

cmd yank-basename-without-extension ${{
    echo "$fx" |
    xargs -r -d '\n' basename -a |
    awk -e '{
      for (i=length($0); i > 0; i--) {
        if (substr($0, i, 1) == ".") {
          if (i == 1) print $0
          else print substr($0, 0, i-1)

          break
        }
      }

      if (i == 0)
        print $0
    }' |
    if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
    xclip -i -selection clipboard
}}

# set as wallpaper
map w %(($(echo "$f" | rg -c '\.(?:png|jpe?g)$') > 0)) && wallpaper "$f" 1;

# flatten folder to current directory
cmd flatten ${{
  for folder in $fx; do
    if [[ -d $folder ]]; then
      mv $folder/* .
      rm -rf $folder
    fi
  done
}}

# Change directory
cmd z %{{
	result="$(zoxide query --exclude $PWD $@)"
	lf -remote "send $id cd $result"
}}

cmd zi ${{
	result="$(zoxide query -i)"
	lf -remote "send $id cd $result"
}}
