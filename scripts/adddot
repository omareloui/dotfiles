#!/usr/bin/env bash

. "$SCRIPTS/utils.sh"

version=2.0.0

verbose=0

LONGOPTS=verbose,help
OPTIONS=vh

PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
eval set -- "$PARSED"

while true; do
	case "$1" in
	-v | --verbose)
		verbose=1
		shift
		;;
	-h | --help)
		echo -e "" echo -e "  ${BOLD}Usage:${END_BOLD}    $(basename "$0") ${YELLOW}[${B_RED}options${DARK_GRAY}...${YELLOW}]${RESET} ${YELLOW}<${GREEN}file${YELLOW}>${RESET}"
		echo -e "  ${BOLD}Version:${RESET}  ${YELLOW}$version${RESET}"
		echo -e ""
		echo -e "  ${BOLD}Description:${RESET}"
		echo -e ""
		echo -e "    ${B_GRAY}Add a file/folder to the dotfiles to track it.${RESET}"
		echo -e ""
		echo -e "  ${BOLD}Args:${RESET}"
		echo -e ""
		echo -e "    ${BOLD}${GREEN}file${WHITE}"
		echo -e "      ${B_RED}-${RESET} The file or folder to track."
		echo -e ""
		echo -e "  ${BOLD}Options:${RESET}"
		echo -e ""
		echo -e "    ${BLUE}-h${RESET}, ${BLUE}--help${RESET}       ${B_RED}-${RESET} Show this help and exit."
		echo -e "    ${BLUE}-v${RESET}, ${BLUE}--verbose${RESET}    ${B_RED}-${RESET} Explain what is being done."
		echo -e ""
		echo -e "  ${BOLD}Examples:${RESET}"
		echo -e ""
		echo -e "    ${DARK_GRAY}# if you're in the same folder containing the config${RESET}"
		echo -e "    ${RED}\$${RESET} ${B_MAGENTA}$(basename "$0")${RESET} nvim"
		echo -e ""
		echo -e "    ${DARK_GRAY}# you can provide the absolute path${RESET}"
		echo -e "    ${RED}\$${RESET} ${B_MAGENTA}$(basename "$0")${RESET} -v ~/.config/neovim"
		echo -e ""
		exit 0
		;;
	--)
		shift
		break
		;;
	*)
		echo -e "${RED}Error:${RESET} Programming error"
		exit 3
		;;
	esac
done

function p() {
	if ((verbose == 1)); then
		echo -e "$1"
	fi
}

if [[ -z $1 ]]; then
	echo -e "${RED_BG}${BLACK}Error${RESET}${YELLOW}:${RESET} you have to provide a file or folder."
	echo -e "${BOLD}${CYAN}Eg${YELLOW}:${RESET} ${RED}\$${RESET} ${B_MAGENTA}$(basename "$0")${RESET} nvim"
	exit 1
fi

file=$(realpath "$1")

if [[ ! -e $file ]]; then
	echo -e "${RED_BG}${BLACK}Error${RESET}${YELLOW}:${RESET} can't find ${UNDERLINE}$1${END_UNDERLINE}."
	exit 1
fi

if [[ -z $DOTFILES_CONFIG ]]; then
	DOTFILES_CONFIG="$HOME/.dotfiles/config"
fi

function add_to_bootstrap {
	config_folder=$(basename $file)

	in_dot_config=$(echo "$file" | grep -Pc "^$HOME/.config/$config_folder$")
	in_root=$(echo "$file" | grep -Pc "^$HOME/$config_folder$")

	bootstrap_file="$BOOTSTRAP_FILES/sym_config.sh"

	if ((in_dot_config == 0)) && ((in_root == 0)); then
		echo -e "${YELLOW}Warning${B_RED}:${RESET} can't location where to put in symconfig script, ignoring updating the bootstrap script."
		return
	fi

	if ((in_dot_config == 1)); then
		sed -i "s#^\(\s*\[\"\$HOME/.config\"\]=\"\)\(.*\)\(\"\)\$#\1\2 $config_folder\3#g" "$bootstrap_file"
	elif ((in_root == 1)); then
		sed -i "s#^\(\s*\[\"\$HOME\"\]=\"\)\(.*\)\(\"\)\$#\1\2 $config_folder\3#g" "$bootstrap_file"
	fi

	p "${BLUE}Info${YELLOW}:${RESET} add the config to the bootstrap file.${RESET}"
}

function init {
	{
		mv "$file" "$DOTFILES_CONFIG/$(basename "$file")" &&
			p "${BLUE}Info${YELLOW}:${RESET} moved the file/folder to \"$DOTFILES_CONFIG/$(basename "$file")\"."

		ln -s "$DOTFILES_CONFIG/$(basename "$file")" "$file" &&
			p "${BLUE}Info${YELLOW}:${RESET} created the symlink.${RESET}"

		add_to_bootstrap
	} && p "${GREEN}Success${YELLOW}:${RESET} done creating the symlink for ${UNDERLINE}$(basename "$file")${END_UNDERLINE}.${RESET}"
}

init
